// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// test
void test();
RcppExport SEXP _lda_svi_test() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    test();
    return R_NilValue;
END_RCPP
}
// lda_online_cpp
List lda_online_cpp(IntegerVector doc_ids, IntegerVector terms, IntegerVector counts, int K, int passes, int batchsize);
RcppExport SEXP _lda_svi_lda_online_cpp(SEXP doc_idsSEXP, SEXP termsSEXP, SEXP countsSEXP, SEXP KSEXP, SEXP passesSEXP, SEXP batchsizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type doc_ids(doc_idsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type terms(termsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type counts(countsSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type passes(passesSEXP);
    Rcpp::traits::input_parameter< int >::type batchsize(batchsizeSEXP);
    rcpp_result_gen = Rcpp::wrap(lda_online_cpp(doc_ids, terms, counts, K, passes, batchsize));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_lda_svi_test", (DL_FUNC) &_lda_svi_test, 0},
    {"_lda_svi_lda_online_cpp", (DL_FUNC) &_lda_svi_lda_online_cpp, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_lda_svi(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
